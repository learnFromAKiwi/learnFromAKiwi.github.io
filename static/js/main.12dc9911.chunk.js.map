{"version":3,"sources":["components/navigation/Navigation.js","components/landingPage/LandingPage.js","components/explore/Explore.js","components/instructors/Instructors.js","components/signIn/SignIn.js","components/routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["links","link","text","Navigation","props","toggleNavbar","bind","closeNavbar","state","collapsed","this","setState","console","log","Navbar","position","expand","dark","className","NavbarBrand","exact","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","map","objLink","i","NavItem","NavLink","key","React","Component","LandingPage","Jumbotron","fluid","Container","Explore","Instructors","SignIn","toInstructor","loginState","toStudent","type","placeholder","style","width","margin","id","htmlFor","textAlign","toggleLogin","Routes","to","component","App","withRouter","Boolean","window","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.12dc9911.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, Nav, NavItem, NavLink, NavbarBrand } from 'reactstrap';\r\n\r\nimport './Navigation.css';\r\n\r\nconst links = [\r\n  { link: \"/explore\", text:\"Explore\" },\r\n  { link: \"/instructors\", text:\"Instructors\" },\r\n  { link: \"/signIn\", text:\"Sign in\" },\r\n];\r\n\r\nclass Navigation extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.closeNavbar = this.closeNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar() {\r\n      this.setState({\r\n        collapsed: !this.state.collapsed\r\n      });\r\n  }\r\n\r\n  closeNavbar() {\r\n      if (this.state.collapsed !== true) {\r\n        this.toggleNavbar();\r\n      }\r\n  }\r\n\r\n  render() {\r\n    console.log(\"hello from navigation\");\r\n    return (\r\n      <div>\r\n        <Navbar position=\"sticky\" expand=\"lg\" dark className=\"navbar sticky-top\">\r\n        <NavbarBrand className=\"link\" exact href=\"/\">LearnFromA.Kiwi</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggleNavbar} />\r\n          <Collapse isOpen={!this.state.collapsed} navbar>\r\n            <Nav navbar className=\"ml-auto\">\r\n              {\r\n                links.map((objLink, i) => {\r\n                  return (<NavItem><NavLink className=\"link\" key={i} href={ objLink.link }>{ objLink.text }</NavLink></NavItem> )\r\n                })\r\n              }\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { Container, Jumbotron, Row, Col } from 'reactstrap';\r\n\r\n\r\nclass LandingPage extends React.Component {\r\n  render() {\r\n    return (\r\n        <Jumbotron fluid>\r\n            <Container fluid>\r\n                <h1 className=\"display-3\">Locals. Learning. Live</h1>\r\n            \r\n            </Container>\r\n      </Jumbotron>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LandingPage;","import React from 'react';\r\n\r\nclass Explore extends React.Component {\r\n  render() {\r\n    return (\r\n        <h1>Explore</h1>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Explore;","import React from 'react';\r\n\r\nclass Instructors extends React.Component {\r\n  render() {\r\n    return (\r\n        <h1>Instructors</h1>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Instructors;","import React from 'react';\r\nimport './SignIn.css'; \r\n\r\nclass SignIn extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = ({\r\n      loginState: \"student\"\r\n    });\r\n  }\r\n\r\n  toInstructor = () => {\r\n    this.setState({\r\n      loginState: \"instructor\"\r\n    })\r\n  }\r\n\r\n  toStudent = () => {\r\n    this.setState({\r\n      loginState: \"student\"\r\n    })\r\n  }\r\n\r\n  toggleLogin(){\r\n    if (this.state.loginState === \"student\"){\r\n      return(\r\n        <form className = \"sign-in-form\">\r\n        <h3>Sign In as a <strong>Student</strong></h3>\r\n        <div className = \"form-group\">\r\n          <label>Email Address</label>\r\n          <input type = \"email\" className = \"form-control\" placeholder= \"Enter Email\" style = {{width: \"50%\", margin: \"auto\"}}/>\r\n        </div>\r\n\r\n        <div className = \"form-group\">\r\n          <label>Password</label>\r\n          <input type = \"password\" className = \"form-control\" placeholder = \"Enter Password\" style = {{width: \"50%\", margin: \"auto\"}}/>\r\n        </div>\r\n\r\n        <div className = \"form-group\">\r\n          <div className = \"custom-control custom-checkbox\">\r\n            <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\r\n            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\r\n          </div>  \r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary btn-block\" style = {{width: \"50%\", margin: \"auto\"}}>Submit</button>\r\n        <div style = {{textAlign: \"center\"}}>\r\n          Forgot <a href=\"#\">password?</a>\r\n        </div>\r\n        <div>\r\n            Are you an <a onClick ={this.toInstructor} href=\"javascript:;\">instructor</a>?\r\n          </div>\r\n      </form>\r\n      )\r\n    } else {\r\n      return (\r\n        <form className = \"sign-in-form\">\r\n          <h3>Sign In as an <strong>Instructor</strong></h3>\r\n          <div className = \"form-group\">\r\n            <label>Email Address</label>\r\n            <input type = \"email\" className = \"form-control\" placeholder= \"Enter Email\" style = {{width: \"50%\", margin: \"auto\"}}/>\r\n          </div>\r\n  \r\n          <div className = \"form-group\">\r\n            <label>Password</label>\r\n            <input type = \"password\" className = \"form-control\" placeholder = \"Enter Password\" style = {{width: \"50%\", margin: \"auto\"}}/>\r\n          </div>\r\n  \r\n          <div className = \"form-group\">\r\n            <div className = \"custom-control custom-checkbox\">\r\n              <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\r\n              <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\r\n            </div>  \r\n          </div>\r\n  \r\n          <button type=\"submit\" className=\"btn btn-primary btn-block\" style = {{width: \"50%\", margin: \"auto\"}}>Submit</button>\r\n          <div style = {{textAlign: \"center\"}}>\r\n            Forgot <a href=\"#\">password?</a>\r\n          </div>\r\n          <div>\r\n            Are you a <a onClick ={this.toStudent} href=\"javascript:;\">student</a>?\r\n          </div>\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        {this.toggleLogin()}\r\n      </div>\r\n    )\r\n    \r\n  }\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\nimport { Route, Switch, Link } from 'react-router-dom';\r\nimport LandingPage from '../landingPage/LandingPage';\r\nimport Explore from '../explore/Explore';\r\nimport Instructors from '../instructors/Instructors';\r\nimport SignIn from '../signIn/SignIn';\r\n\r\nclass Routes extends React.Component {\r\n    render() {\r\n        return (\r\n            // <Switch>\r\n            //     <Route path=\"/\" component={ LandingPage } exact/>\r\n            //     <Route path=\"/explore\" component={ Explore } exact/>\r\n            //     <Route path=\"/instructors\" component={ Instructors } exact/>\r\n            //     <Route path=\"/signin\" component={ SignIn } exact/>\r\n            // </Switch>\r\n            <Switch>\r\n                <Link to = \"learnFromAKiwi/\" component = { LandingPage } />\r\n                <Link to = \"learnFromAKiwi/explore\" component = { Explore } />\r\n                <Link to = \"learnFromAKiwi/instructors\" component = { Instructors } />\r\n                <Link to = \"learnFromAKiwi/signin\" component = { SignIn } />\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Navigation from './components/navigation/Navigation';\r\nimport Routes from './components/routes/Routes';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n        <main className=\"App\">\r\n          <Navigation />\r\n          <Routes />\r\n        </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <HashRouter basename = {\"/learnFromAKiwi\"}>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n  // added learnfromAKiwi basename\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}